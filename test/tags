!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Solidity	E,event	/Event/
!_TAG_KIND_DESCRIPTION!Solidity	M,member	/Struct member/
!_TAG_KIND_DESCRIPTION!Solidity	c,contract	/Contract/
!_TAG_KIND_DESCRIPTION!Solidity	e,enum	/Enum/
!_TAG_KIND_DESCRIPTION!Solidity	f,function	/Function/
!_TAG_KIND_DESCRIPTION!Solidity	m,modifier	/Modifier/
!_TAG_KIND_DESCRIPTION!Solidity	n,enumerator	/Enum value/
!_TAG_KIND_DESCRIPTION!Solidity	s,struct	/Struct/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Solidity	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/wolf.honore/tmp/solidity.ctags/test/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
C	test.sol	/^contract C {$/;"	c
E	test.sol	/^enum E { EA, EB, EC }$/;"	e
EA	test.sol	/^enum E { EA, EB, EC }$/;"	n	enum:E
EB	test.sol	/^enum E { EA, EB, EC }$/;"	n	enum:E
EC	test.sol	/^enum E { EA, EB, EC }$/;"	n	enum:E
S	test.sol	/^struct S {$/;"	s
V	test.sol	/^event V(uint vx, address payable vy);$/;"	E
f	test.sol	/^    function f() public {}$/;"	f
m	test.sol	/^    modifier m() { _; }$/;"	f
sx	test.sol	/^    uint sx;$/;"	M	struct:S
sy	test.sol	/^    mapping (uint => bool) sy;$/;"	M	struct:S
